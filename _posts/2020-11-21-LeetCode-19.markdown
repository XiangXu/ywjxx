---
layout: post 
title:  19. Remove Nth Node From End of List 
date:   2020-11-20 21:38
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given the head of a linked list, remove the nth node from the end of the list and return its head.

**Follow up**: Could you do this in one pass?

Example 1:

![letters](https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg)

```
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:

Input: head = [1], n = 1
Output: []

Example 3:

Input: head = [1,2], n = 1
Output: [1]
```

Constraints:

* The number of nodes in the list is sz.
* 1 <= sz <= 30
* 0 <= Node.val <= 100
* 1 <= n <= sz

## Solution

In order to solve this problem in one pass, we would use **Fast and Slow Pointers**. 

Let's take an example: [1, 2, 3, 4, 5]

1. We can declare two integer pointers call fast and slow and let them both point to 1 at the begining.
2. We move fast point to the right with n = 2 steps. At this time, fast pointer points to 3 and the slow pointer still point to 1. 
3. We start to move both fast and slow pointers to the right at same time until the fast pointer points to the last element which is 5. At this time, the slow pointer is pointing to element 3. 
4. Then we update slow pointer to let it points to the next elemet which is 5. 

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    public ListNode removeNthFromEnd(ListNode head, int n) 
    {
        if(head == null)
            return head;
        
        ListNode dummyHead = new ListNode(0);
        dummyHead.next = head;
        
        ListNode slow = dummyHead;
        ListNode fast = dummyHead;
        
        while(n >= 0)
        {
            fast = fast.next;
            n --;
        }
        
        while(fast != null)
        {
            fast = fast.next;
            slow = slow.next;
        }
        
        slow.next = slow.next.next;
        
        return dummyHead.next;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: length of ListNode head.
* **Space Complexity: O(1)**: Constant space is used.
