---
layout: post 
title:  50. Pow(x, n)
date:   2021-02-14 17:06
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Implement pow(x, n), which calculates x raised to the power n (i.e. xn).

```
Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
```

<!-- Line breaks -->
<br />

Constraints:

* -100.0 < x < 100.0
* -2<sup>31</sup> <= n <= 2<sup>31</sup>-1
* -10<sup>4</sup> <= x<sup>n</sup> <= 10<sup>4</sup>

## Solution

Let's take an example:

```
1. x = 2, n = 1, result = 2;
2. x = 2, n = 2, result = 2 * 2 = 4;
3. x = 2, n = 3, result = 2 * 2 * 2 = 8;
4. x = 2, n = 4, result = 2 * 2 * 2 * 2 = 16;
5. x = 2, n = 5, result = 2 * 2 * 2 * 2 * 2 = 32;
```

<!-- Line breaks -->
<br />

It is clear that we can divide n in half at each recursive call.

```java
class Solution 
{
    public double myPow(double x, int n) 
    {
        return n < 0 ? 1 / pow(x, -n) : pow(x, n);
    }
    
    private double pow(double x, int n)
    {
        if(n == 0)
            return 1;
        
        if(n == 1)
            return x;
        
        if(n % 2 == 0)
            return pow(x * x, n / 2);
        else
            return pow(x * x, n / 2) * x;
    }       
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(logn)**: because we divide n in half each time.
* **Space Complexity: O(logn)**: Calls in calling stack may also reach O(logn) as well.
