---
layout: post
title:  Reverse Integer
date:   2020-09-30 22:57
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given a 32-bit signed integer, reverse digits of an integer.

```
Example 1:

Input: 123
Output: 321

Example 2:

Input: -123
Output: -321

Example 3:

Input: 120
Output: 21
```

Note:

Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

<!-- Line breaks -->
<br />

## Solution

The key to solve this problem is using division and modulus.

1. By using division, we can get remainder.
2. By using modulus, we can get last digit number.
3. We can handle intger out of range issue by using long.

Please find calculation steps below:

For example:

```
Step 1: 

123 % 10 = 3
123 / 10 = 12

Step 2:

3 * 10 + 12 % 10 = 30 + 2 = 32
12 / 10 = 1

Step 3:

32 * 10 + 1 / 10 = 320 + 1 = 321
```

```java
class Solution 
{
    public int reverse(int x)
    {
        // handle minus
        boolean isMinus = false;
        if(x < 0)
        {
            x = -x;
            isMinus = true;
        }
        
        // declare as long tye to handle integer out of range issue
        long result = 0;
        while(x > 0)
        {
            result = result * 10 + x % 10;
            x = x / 10;
            
            if(result > Integer.MAX_VALUE)
                return 0;
        }
        
        if(isMinus)
            result= -result;
        
        return (int)result;
            
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(log(n)))**: Each time we divide number x by 10.
* **Space Complexity: O(l)**: We only declare few variables.

