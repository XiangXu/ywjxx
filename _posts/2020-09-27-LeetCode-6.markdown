---
layout: post
title:  ZigZag Conversion
date:   2020-09-27 22:20
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

```
P   A   H   N
A P L S I I G
Y   I   R
```

And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

```
string convert(string s, int numRows);
```

```
Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"

Example 2:

Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"

Explanation:

P     I    N
A   L S  I G
Y A   H R
P     I
```

<!-- Line breaks -->
<br />

## Solution

In order to solve this problem, we can define an array of StringBuilder to save characters in each line. The size of array StringBuilder will be the given integer numRows.

Meantime, traverse the given String s and also define a boolean flag to control traverse direction. 

```java
class Solution 
{
    public String convert(String s, int numRows) 
    {
        // handle special case
        if(s == null || s.length() == 0 || numRows <= 1)
            return s;
        
        // init StringBuilder array
        StringBuilder[] sbs = new StringBuilder[numRows];
        for(int i=0; i<numRows; i++)
            sbs[i] = new StringBuilder();
        
        // StringBuilder array global index
        int index = 0;

        // traverse direction controller
        boolean changeDirection = false;
            
        for(int i=0; i<s.length(); i++)
        {
            sbs[index].append(s.charAt(i));
            if(index == 0 || index == numRows-1)
                changeDirection = !changeDirection;
            
            index += changeDirection ? 1 : -1;
        }
        
        
        for(int i=1; i<sbs.length; i++)
            sbs[0].append(sbs[i].toString());
        
        return sbs[0].toString();
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n))**: We traverse the given String.
* **Space Complexity: O(n)**: We create an array of StringBuilder to store characters.