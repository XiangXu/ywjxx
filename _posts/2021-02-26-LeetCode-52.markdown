---
layout: post 
title:  51. N-Queens II
date:   2021-02-26 00:04
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return the number of distinct solutions to the n-queens puzzle.

```
Example 1:

Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:

Input: n = 1
Output: [["Q"]]
```


<!-- Line breaks -->
<br />

## Solution

This problem can be solved by using back tracking.

```java
class Solution 
{
    public int totalNQueens(int n)
    {   
        if(n == 0)
            return 0;
        
        char[][] board = generateBoard(n);
        
        List<List<String>> result = new ArrayList<>();
        
        backTracking(result, board, 0);
        
        return result.size();
    }
    
    private List<String> generateListFromBoard(char[][] board)
    {
        List<String> list = new ArrayList();
        
        for(char[] chs : board)
        {
            StringBuilder sb = new StringBuilder();
            
            for(char ch : chs)
            {
                sb.append(ch);
            }
            
            list.add(sb.toString());
        }
        
        return list;
    }
    
    private void backTracking(List<List<String>> result, char[][] board, int row)
    {
        if(row == board.length)
        {
            result.add(generateListFromBoard(board));
            return;
        }
        
        for(int col=0; col<board.length; col++)
        {
            if(isValid(board, row, col))
            {
                board[row][col] = 'Q';
                backTracking(result, board, row+1);
                board[row][col] = '.';
            }
        }
    }
    
    private boolean isValid(char[][] board, int row, int col)
    {
        // check if any two of 'Q's are in same line vertically
        for(int i=0; i<row; i++)
        {
            if(board[i][col] == 'Q')
            {
                return false;
            }
                
        }
        
        
        // check if any two of 'Q' are in same line diagonally
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--)
        {
            if(board[i][j] == 'Q')
                return false;
        }
        
        
        for(int i=row-1, j=col+1; i>=0 && j<board.length; i--, j++)
        {
            if(board[i][j] == 'Q')
            {
                return false;
            }
        }
        
        return true;
    }
    
    private char[][] generateBoard(int n)
    {
        char[][] board = new char[n][n];
      
        for(int i=0; i<n; i++)
        {
            Arrays.fill(board[i], '.');
        }
        
        return board;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: ?**: 
* **Space Complexity: ?**:

