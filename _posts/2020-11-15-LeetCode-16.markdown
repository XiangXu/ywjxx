---
layout: post 
title:  15 3 Sum Closest
date:   2020-11-15 21:06
image:  leetcode.jpeg
tags:   LeetCode
---

Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

```
Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
```

<!-- Line breaks -->
<br />

Constraints:

* 3 <= nums.length <= 10^3
* -10^3 <= nums[i] <= 10^3
* -10^4 <= target <= 10^4

## Problem

This question is similiar like LeetCode 16. It can be solve by using the same approach. The only different here is we need to find the closest number.

```java
class Solution 
{
    public int threeSumClosest(int[] nums, int target) 
    {
        if(nums == null || nums.length == 0 || nums.length < 3)
            return target;
        
        Arrays.sort(nums);
        
        int result = nums[0] + nums[1] + nums[nums.length - 1];
        
        for(int i=0; i<nums.length-2; i++)
        {
            if(i > 0 && nums[i] == nums[i -1])
                continue;
            
            int left = i + 1;
            int right = nums.length - 1;
            
            while(left < right)
            {
                int sum = nums[i] + nums[left] + nums[right];
                
                if(Math.abs(target - sum) < Math.abs(target - result))
                    result = sum;
                
                if(sum > target)
                {
                    right --;
                    while(left < right && nums[right] == nums[right+1])
                        right --;
                }
                else if(sum < target)
                {
                    left ++;
                    while(left < right && nums[left] == nums[left-1])
                        left++;
                }
                else
                {
                    return sum;
                }
            }
        }
        
        return result;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n<sup>2</sup>)**: Traverse the given array and also traverse the reamining part of array with two pointers.
* **Space Complexity: O(n)**: length of result list.