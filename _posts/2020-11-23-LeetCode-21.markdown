---
layout: post 
title:  21. Merge Two Sorted Lists
date:   2020-11-23 23:37
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.

```
Example 1:

Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:

Input: l1 = [], l2 = []
Output: []

Example 3:

Input: l1 = [], l2 = [0]
Output: [0]
```

<!-- Line breaks -->
<br />

Constraints:

* The number of nodes in both lists is in the range [0, 50].
* -100 <= Node.val <= 100
* Both l1 and l2 are sorted in non-decreasing order.

## Solution

This problem is not really hard, we can just iterator over the two given list node and cmpare each value. 

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    // This problem is not really complicated, we can just iterator over the two given list node and cmpare each value. 
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) 
    {
        ListNode dummyHead = new ListNode(0);
        ListNode current = dummyHead;
        
        while(l1 != null || l2 != null)
        {
            int val1 = l1 == null ? Integer.MAX_VALUE : l1.val;
            int val2 = l2 == null ? Integer.MAX_VALUE : l2.val;
            
            if(val1 < val2)
            {
                current.next = new ListNode(val1);
                l1 = l1.next;
            }
            else
            {
                current.next = new ListNode(val2);
                l2 = l2.next;
            }
            
            current = current.next;
        }
        
        
        return dummyHead.next;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: n is the max length of l1 or l2.
* **Space Complexity: O(n)**: the length of dummyHead..


This problem can also be solved by using Recursion.

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    // 
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) 
    {
        if(l1 == null)
            return l2;
       
        if(l2 == null)
            return l1;
        
        ListNode handler;
        
        if(l1.val < l2.val)
        {
            handler = l1;
            handler.next = mergeTwoLists(l1.next, l2);
        }
        else
        {
            handler = l2;
            handler.next = mergeTwoLists(l1, l2.next);
        }
        
        return handler;
    }
}
```