---
layout: post
title:  11. Container With Most Water
date:   2020-10-18 14:59
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

Example 1: 

![most_water](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg)

```
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
```

<!-- Line breaks -->
<br />

Example 2:

```
Input: height = [1,1]
Output: 1
```

<!-- Line breaks -->
<br />

Example 3: 

```
Input: height = [4,3,2,1,4]
Output: 16
```

<!-- Line breaks -->
<br />

Example 4:

```
Input: height = [1,2,1]
Output: 2
```

<!-- Line breaks -->
<br />

Constraints:

* 2 <= height.length <= 3 * 10<sup>4</sup>
* 0 <= height[i] <= 3 * 10<sup>4</sup>

## Solution

This probelm can be sovled by using two pointers. The intuition behind this approach is that the area formed between the lines will always be limited by the height of the shorter line. Further, the fater the lines, the more will be area obatined. 

We take two pointers, one at the beginning and one at the end of the array constituting the length of the lines. Futher, we maintain a variable maxarea to store the maximum area obtained till now. At every step, we find out the area formed between them, update maxarea and move the pointer pointing to the shorter line towards the other end by one step.

```java
class Solution 
{
    
    public int maxArea(int[] height) 
    {
        int maxArea = 0;
        
        // Handle special case
        if(height == null || height.length < 2)
            return maxArea;
        
        int leftPointer = 0;
        int rightPointer = height.length-1;
        
        while(leftPointer < rightPointer)
        {
            int width = rightPointer - leftPointer;
            int minHeight = Math.min(height[leftPointer], height[rightPointer]);
            maxArea = Math.max(maxArea, width * minHeight);
            
            if(height[leftPointer] < height[rightPointer])
                leftPointer ++;
            else
                rightPointer --;
        }
        
        return maxArea;
        
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: Single pass.
* **Space Complexity: O(1)**: Constant space is used.
