---
layout: post 
title:  30. Substring with Concatenation of All Words
date:   2020-12-19 23:02
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem 

You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.

You can return the answer in any order.

```
Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.

Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
Output: []

Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
Output: [6,9,12]
```

<!-- Line breaks -->
<br />

Constraints:

* 1 <= s.length <= 104
* s consists of lower-case English letters.
* 1 <= words.length <= 5000
* 1 <= words[i].length <= 30
* words[i] consists of lower-case English letters.

## Solution

The key to solve this problem is to use a hash map for tracking.

1. Key will be the each word in the given array words.
2. Value will be the count of each word repeated in the given array words. 

```java
class Solution 
{
    public List<Integer> findSubstring(String s, String[] words) 
    {
        if(s == null || s.length() == 0 || words == null || words.length == 0)
            return Collections.emptyList();
        
        int len = words[0].length();
        int totalLen = len * words.length;
        
        List<Integer> result = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        
        for(String word : words)
            map.put(word, map.getOrDefault(word, 0) + 1);
        
        for(int i=0; i<=s.length() - totalLen; i++)
        {
            // Create a copy because we will modify the map later.
            Map<String, Integer> copy = new HashMap<>(map);
            String tmpStr = s.substring(i, i+len);
        
            if(map.containsKey(tmpStr) && isValidSubString(len, s.substring(i, i+totalLen), copy))
                result.add(i);
                
        }
        
        return result;
    }
    
    private boolean isValidSubString(int len, String str, Map<String, Integer> map)
    {
        for(int i=0; i<=str.length()-len; i+=len)
        {
            String tmpStr = str.substring(i, i+len);
            if(!map.containsKey(tmpStr) || map.get(tmpStr) == 0)
                return false;

            int count = map.get(tmpStr);
            map.put(tmpStr, --count);
        }
        
        return true;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: the length of given String s.
* **Space Complexity: O(n)**: the length of HashMap.