---
layout: post 
title:  33. Search in Rotated Sorted Array
date:   2020-12-25 21:41
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

You are given an integer array nums sorted in ascending order, and an integer target.

Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

If target is found in the array return its index, otherwise, return -1.

```
Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:

Input: nums = [1], target = 0
Output: -1
```

<!-- Line breaks -->
<br />

Constraints:

* 1 <= nums.length <= 5000
* -10^4 <= nums[i] <= 10^4
* All values of nums are unique.
* nums is guranteed to be rotated at some pivot.
* -10^4 <= target <= 10^4

## Solution 

In order to solve this problem, the first thing we need to do is to find the pivot. We can use binary search to find the pivot. Once we find the index of pivot, we can use binary search to find index of the target.


```java
class Solution 
{
    public int search(int[] nums, int target)
    {
        if(nums == null || nums.length == 0)
            return -1;
        
        int pivot = findPivot(nums);
        
        if(nums[pivot] == target) 
            return pivot;
        
        int left = (target > nums[nums.length-1]) ? 0 : pivot;
        int right = (target > nums[nums.length-1]) ? pivot-1 : nums.length-1;
        
        return binarySearch(left, right, nums, target);
        
    }
    
    private int binarySearch(int left, int right, int[] nums, int target)
    {
        while(left <= right)
        {
            int mid = left + (right - left) / 2;
            
            if(nums[mid] == target)
                return mid;
            else if(nums[mid] < target)
                left = mid + 1;
            else 
                right = mid - 1;
        }
        
        return -1;
    }
    
    private int findPivot(int[] nums)
    {
        int left = 0;
        int right = nums.length-1;
        
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            
            if(nums[mid] > nums[right])
            {
                left = mid + 1;
            }
            else
            {
                right = mid;
            }
        }
        
        return left;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(Logn)**: Binary Search.
* **Space Complexity: O(1)**: Only created few variables.