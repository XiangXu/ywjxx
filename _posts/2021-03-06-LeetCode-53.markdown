---
layout: post 
title:  53. Maximum Subarray
date:   2021-03-06 22:30
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem


Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

```
Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Example 2:

Input: nums = [1]
Output: 1

Example 3:

Input: nums = [0]
Output: 0

Example 4:

Input: nums = [-1]
Output: -1

Example 5:

Input: nums = [-100000]
Output: -100000
```

<!-- Line breaks -->
<br />

Constraints:

* 1 <= nums.length <= 3 * 10<sup>4</sup>
* -10<sup>5</sup> <= nums[i] <= 10<sup>5</sup>

## Solution

This problem can be solved by using dynamic programming. The basic idea is we need to do the calculation for each number and always select the larger result.

Let's take an example: nums = [-2,1,-3,4,-1,2,1,-5,4]

```
1. -2
2. -2 + 1 or 1 -> 1
3. 1 -3 or -3 -> -2
4. -2 + 4 or 4 -> 4
5. 4 - 1 or -1 -> 3
6. 3 + 2 or 2 -> 5
7. 5 + 1 or 1 -> 6
8. 6 - 5 or -5 -> 1
9. 4 + 1 or 4 -> 5
```

<!-- Line breaks -->
<br />

So the largest is 6

```java
class Solution 
{

    public int maxSubArray(int[] nums) 
    {
        if(nums == null || nums.length == 0)
            return 0;
        
        int[] table = new int[nums.length];
        int max = nums[0];
        table[0] = nums[0];
        
        for(int i=1; i<nums.length; i++)
        {
            table[i] = Math.max(nums[i], table[i-1] + nums[i]);
            max = Math.max(max, table[i]);
        }
        
        return max;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: n is the length of nums.
* **Space Complexity: O(n)**: n is the lengh of nums.