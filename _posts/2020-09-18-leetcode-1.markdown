---
layout: post
title:  "Two Sum"
date:   2020-09-18 09:43:20 +0300
image:  leetcode.jpeg
tags:   Programming LeetCode
---

## Problem

Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

```
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
```
<!-- Line breaks -->
<br />
<br />

## Solution

The key to solve this probem fast is to use a HashMap.

1. Traverse the given nums you will get current number from nums array. 
2. Do the subtraction to get complement by using (target - current number).
3. If the complement doesn't exist in HashMap, we can save current number and index into HashMap.
4. Otherwise we can get index by using complement as a key from HashMap, then return it with current index. 

```java
class Solution 
{
    public int[] twoSum(int[] nums, int target) 
    {   
        if(nums == null || nums.length == 0)
            return nums;
        
        int[] result = new int[2];
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i=0; i<nums.length; i++)
        {
            int complement = target - nums[i];
           
            if(map.containsKey(complement))
            {
                result[0] = i;
                result[1] = map.get(complement);
            }    
            else
            {
                map.put(nums[i], i);
            }
        }
        
        return result;
    }
}
```
<!-- Line breaks -->
<br />
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: We traverse the given array nums.
* **Space Complexity: O(n)**: The extra space required on the number of items stored in the hash table, which stores exactly n elemetns.