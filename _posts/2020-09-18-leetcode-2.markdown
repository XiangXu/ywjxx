---
layout: post
title:  "Add Two Numbers"
date:   2020-09-18 15:03
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
```
<!-- Line breaks -->
<br />
<br />

## Solution

In order to solve this problem, we need to have a good understanding of List Node. The solution is to traverse the given two List Nodes and calculate each sum, we also need to handle the situation when sum is over 10. 

Be aware that when we need to traverse or update a List Node, remember to create a dummy head points to the List Node and then traverse or update list node by using that dummy head. Otherwise, you may end up with updated List Node unexpectly. 

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        ListNode dummyHead = new ListNode(0);
        ListNode p = l1, q = l2, curr = dummyHead;
        int carry = 0;
        
        while(p != null || q != null)
        {
            int x = (p != null) ? p.val : 0;
            int y = (q != null) ? q.val : 0;
            
            int sum = x + y + carry;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if( p != null)
                p = p.next;
            if(q != null)
                q = q.next;
        }
        
        if(carry > 0)
            curr.next = new ListNode(carry);
        
        return dummyHead.next;
    }
}
```

<!-- Line breaks -->
<br />
<br />

## Time & Space Complexity:

* **Time Complexity: O(max(m, n))**: Assume that m and n represents the length of l1 and l2 respectively, the algorithm above iterates at most max(m, n) times.
* **Space Complexity: O(max(m, n))**: The length of the new list is at most max(m, n) + 1.