---
layout: post 
title:  40. Combination Sum
date:   2021-01-11 23:14
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

```
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
```

<!-- Line breaks -->
<br/>

Constraints:

* 1 <= candidates.length <= 100
* 1 <= candidates[i] <= 50
* 1 <= target <= 30

## Solution

This problem is similar to the previous one, however are two difference: 
  1. Each number in candidates may only be used once in the combination.
  2. The number in the candidates array can be duplicated, which means the solution set may contain duplicate combinations.

The first part is easy to solve, we know we need to use back tracking to build all combinations. So when we pass the index into back tracking method, we can set it to index + 1. By doing this, the for loop will start with the next number and each number in candidates will be used once in the combination.

In order to solve the second part, we need to sort the arry first. After sorting, we can easily skip the duplicated number by checking the current number with previous number.

```java
if(i != index && candidates[i] == candidates[i-1])
    continue;
```

<!-- Line breaks -->
<br/>

`i != index` indicates that we only skip the same number when we try to find the next number in same for loop layer.

For example:  candidates = [1, 2, 2, 2,], target = 5;

1. tempList = [1],          i = 1, index = 0;
2. tempList = [1, 2],       i = 1, index = 1;
3. tempList = [1, 2, 2] = 5 i = 2, index = 2; According to back tracking, we remove the last number in tempList.
4. tempList = [1, 2],       i = 3, index = 2; candidats[3] = 2, we need to skip this in this for loop layer.

```java
class Solution 
{  
    public List<List<Integer>> combinationSum2(int[] candidates, int target) 
    {
        if(candidates == null || candidates.length == 0)
            return Collections.emptyList();
        
        Arrays.sort(candidates);
        
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> tmpList = new ArrayList<>();
        
        backTracking(0, candidates, target, tmpList, result);
        
        return result;
    }
    
    private void backTracking(int index, int[] candidates, int target, List<Integer> tmpList, List<List<Integer>> result)
    {
        if(target <= 0)
        {
            if(target == 0)
                result.add(new ArrayList<Integer>(tmpList));
            return;
        }
        
        for(int i=index; i<candidates.length; i++)
        {      
            if(i != index && candidates[i] == candidates[i-1])
                continue;
            
            tmpList.add(candidates[i]);
            // Move to next number
            backTracking(i+1, candidates, target-candidates[i], tmpList, result);
            tmpList.remove(tmpList.size()-1);
        }
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(2<sup>N</sup>)**: The worst case, our algorithm will exhaust all possible combinations from the input array, which in total amounts to 2<sup>N</sup>. N will be the size of the input array
* **Space Complexity: O(n)**: We created a tmp list to store the result. 