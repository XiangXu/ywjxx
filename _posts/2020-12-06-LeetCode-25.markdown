---
layout: post 
title:  25. Reverse Nodes in k-Group
date:   2020-12-06 13:21
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

Follow up:

* Could you solve the problem in O(1) extra memory space?
* You may not alter the values in the list's nodes, only nodes itself may be changed.

```
Example 1:

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:

Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

Example 3:

Input: head = [1,2,3,4,5], k = 1
Output: [1,2,3,4,5]

Example 4:

Input: head = [1], k = 1
Output: [1]
```

<!-- Line breaks -->
<br />

Constraints:

The number of nodes in the list is in the range sz.
* 1 <= sz <= 5000
* 0 <= Node.val <= 1000
* 1 <= k <= sz

## Solution 

This problem requires us to solve it in O(l) extra memory space. It means we have to modify the given ListNode.

We can declare a ListNode curr which pointing to thead and a counter. Then we interator over the given ListNode head. When counter equals to the given integer k, we can reverse the curr. Use recursion to conver all the cases.

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
 
    public ListNode reverseKGroup(ListNode head, int k) 
    {
        // Check special case
        if(head == null || k == 0)
            return head;
        
        ListNode curr = head;
        int count = 0;
        
        while(curr != null && count < k-1)
        {
            curr = curr.next;
            count ++;
        }
        
        // Reach the end of ListNode
        if(curr == null)
            return head;
        
        // Get the next ListNode so we can link it back after the reverse
        ListNode next = curr.next;
        curr.next = null;
        
        ListNode reversedListNode = reverseListNode(head);
        head.next = reverseKGroup(next, k);
        
        return reversedListNode;
    }
    
    private ListNode reverseListNode(ListNode head)
    {
        ListNode prev = null;
        
        while(head != null)
        {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }

        return prev;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: where n is the length of ListNode head.
* **Space Complexity: O(l)**: we only declare some variables.