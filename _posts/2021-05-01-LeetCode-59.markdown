---
layout: post 
title:  59. Spiral Matrix
date:   2021-05-01 21:59
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given an m x n matrix, return all elements of the matrix in spiral order.

```
Exmaple 1:

Input: matrix = [
    [1,2,3],
    [4,5,6],
    [7,8,9]
]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:

Input: matrix = [
    [1,2,3,4],
    [5,6,7,8],
    [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
```

<!-- Line breaks -->
<br />

Constraints:

* m == matrix.length
* n == matrix[i].length
* 1 <= m, n <= 10
* -100 <= matrix[i][j] <= 100

## Solution

In order to return all elements of the matrix in spiral order, we can define following variables: rowStart, rowEnd, columnStart and columnEnd to tracking each start and end points.

```java
class Solution 
{

    public List<Integer> spiralOrder(int[][] matrix) 
    {
        int rowStart = 0;
        int rowEnd = matrix.length - 1;
        
        int columnStart = 0;
        int columnEnd = matrix[0].length - 1;
        
        List<Integer> result = new ArrayList<>();
        
        while(rowStart <= rowEnd && columnStart <= columnEnd) 
        {
            for(int i=columnStart; i<=columnEnd; i++)
            {
                result.add(matrix[rowStart][i]);
            }
            
            rowStart ++;
            
            for(int i=rowStart; i<=rowEnd; i++)
            {
                result.add(matrix[i][columnEnd]);
            }
            
            columnEnd --;
            
            // handle the situation when the length of column and row are not equal.
            if(rowStart <= rowEnd)
            {   
                for(int i=columnEnd; i>=columnStart; i--)
                {
                    result.add(matrix[rowEnd][i]);
                }
            }

            rowEnd --;
            
            // handle the situation when the length of column and row are not equal.
            if(columnStart <= columnEnd)
            {
                for(int i=rowEnd; i>= rowStart; i--)
                {
                    result.add(matrix[i][columnStart]);
                }
            }
            
            columnStart ++;
        }
        
        return result;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: where n is the total number of elements in the input matrix. We add every element in the matrix to our final answer.
* **Space Complexity: O(n))** n is the length of result.