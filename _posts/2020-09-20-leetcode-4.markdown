---
layout: post
title:  Median of Two Sorted Arrays
date:   2020-09-20 12:15
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

Follow up: The overall run time complexity should be O(log (m+n)).

```
Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Example 3:

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000

Example 4:

Input: nums1 = [], nums2 = [1]
Output: 1.00000

Example 5:

Input: nums1 = [2], nums2 = []
Output: 2.00000
```

<!-- Line breaks -->
<br />

Constraints:

* nums1.length == m
* nums2.length == n
* 0 <= m <= 1000
* 0 <= n <= 1000
* 1 <= m + n <= 2000
* -106 <= nums1[i], nums2[i] <= 106

## Solution

From the probem description we can get two important information:

1. The given two arrays are sotred. 
2. The overall run time complexity should be O(log(m+n)).

We know we can solve this problem by implementing Binary Search. 

**When you are asked to sovle a problem in run time complexity O(log(n)), you need to think about Binary Search**.

Let's take an example:

```
               L1    L1
nums1: 2   4   6  |  9   10   
               L2    R2
nums2: 1   3   5  |  7   11   13   16

total: 1   2   3   4   5   6  ï½œ  7   9   10   11   13   16

The median is (6 + 7) / 2 = 6.5. 
```

As you can see above, the length of array total = the length of array nums1 + the length of array nums2.  

We know the mdeidan is calculated by averaging numbers 6 and 7, so if we make a cut in array total between 6 and 7, the left side of cut point have numbers: 1, 2 ,3, 4, 5, 6 and the right side of cut point have numbers: 7, 9, 10, 11, 13, 16. 

Let's take a look at the numbers 1, 2 ,3, 4, 5, 6. on the left side of cut point.

1. The length of left side = length of array total / 2. 
2. The left side numbers 2, 4, 6 are from array nums1 and the right side numbers 1, 3, 5 are from array nums2. 

In order to satisfy two conditions above, we can make a cut in array nums1 between 6 and 9, and make a cut in array nums2 between 5, 7. 

**Then the problem becomes to how to find cut point cut1 in nums1, cut2 position = length of left side - cut1**. 

How can we determine cut1 position? 

Because nums1 and nums2 are two sorted array, cut1 position should satisfy two conditions: 

1. L1 <= R2 
2. L2 <= R1

We can use binary search to determine cut1. 

```java
    public double findMedianSortedArrays(int[] nums1, int[] nums2) 
    {
        int len1 = nums1.length;
        int len2 = nums2.length;
        
        // Do Binary Search on a smaller array. 
        if(len1 > len2)
            return findMedianSortedArrays(nums2, nums1);
        
        // Check special case
        if(len1 == 0)
        {
            if(len2 % 2 == 0)
                return (double)(nums2[len2 / 2 -1] + nums2[len2 / 2]) / 2;
            else
                return (double)(nums2[len2 / 2]);
        }
        
        
        int total = len1 + len2;
        int cut1 = 0;
        int cut2 = 0;
        int left = 0;
        int right = len1;
        
        while(left <= right)
        {
            cut1 = (left + right) / 2;
            cut2 = total / 2 - cut1;
            
            int L1 = (cut1 == 0) ? Integer.MIN_VALUE : nums1[cut1 - 1];
            int L2 = (cut2 == 0) ? Integer.MIN_VALUE : nums2[cut2 - 1];
            int R1 = (cut1 == len1) ? Integer.MAX_VALUE : nums1[cut1];
            int R2 = (cut2 == len2) ? Integer.MAX_VALUE : nums2[cut2];
            
            if(R1 < L2)
                left = cut1 + 1;
            else if(L1 > R2)
                right = cut1 - 1;
            else
            {
                if(total % 2 == 0)
                    return (double)(Math.max(L1, L2) + Math.min(R1, R2)) / 2;
                else
                    return (double)(Math.min(R1, R2));
            }
        }
        
        return 0.0;
    }
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(log(min(m, n)))**: We do binary search in smaller array.
* **Space Complexity: O(l)**: We only create few variables.










