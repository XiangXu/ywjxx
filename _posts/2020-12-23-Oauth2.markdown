---
layout: post
title:  What is OAuth 2.0?
date:   2020-12-23 15:18
image:  oop.jpg
tags:   [Fundation, OAuth]
---

**OAuth 2.0, which stands for "Open Authorization", is a standard designed to allow a website or application to access resources hosted by other web apps on behalf of a user**. It replaced OAuth 1.0 in 2012 and is now the industry standard for online authorization. OAuth 2.0 provides consented access and restricts actions of what the client app can perform on resources on behalf of the user, without ever sharing the user's credentials.

Although the web is the main platform for OAuth 2, the specification also describes how to handle this kind of delegated access to other client types (browser-based applications, server-side web applications, naive/mobile apps, connected devices, etc.)

## Principles of OAuth 2.0

OAuth 2.0 is an authorization protocol and NOT an authentication protocol. As such, it is designed primarily as a meas of granting access to a set of resources, for example, remote APIs or user's data.

OAuth 2.0 uses Access Token. An Access Token is a piece of data that represents the authorization to access resources on behalf of the end-user. OAuth 2.0 doesn't define a specific format for Access Tokens. However, in some context, the JSON Web Token(JWT) format is often used. This enables token issuers to cinlude data in the token itself. Also, for security reasons, Access Token may have an expiration date.

## OAuth 2.0 Roles

The idea of roles is part of the core specification of the OAuth 2.0 authorization framework.These define the essential components of an OAuth 2.0 system, and are as follows:

* **Resource Owner**: The user or system that owns the protected resources and can grant access to them.
  
* **Client**: The client is the system that requires access to the protected resources. To access resources, the Client must hold the appropriate Access Token.
  
* **Authorization Server**: This server receives requests from the Client for Access Token and issues them upon successful authentication and consent by the Resource Owner. The authorization server exposes two endpoints: the Authorization endpoint, which handles the interactive authentication and consent of the user, and the Token endpoint, which is involved in a machine to machine interaction.

* **Resource Server**: A server that protectes the user's resources and receives access requests from the Client. It accepts and validates an Access Token from the client and returns the appropriate resources to it.

## OAuth 2.0 Scopes

Scopes are an important concept in OAuth 2.0. They are used to speficy exactly the reason for which access to resources may be granted. Acceptable scope values, and which resources they releate to, are dependent on the Resource Server.

## How Does OAuth 2.0 work?

At the most basic level, before OAuth 2.0 can be used, the Client must acquire its own credentials, a client id and client secret, from the Authorization Server in order to identify and authenticate itself when requesting an Access Token.

Using OAuth 2.0, access requests are initiated by the Client, e.g., a mobile app, website, smart TV app, desktop application, etc. The token request, exchange, and response follow this general flow:

1. The Client requests authorization (authorization request) from the Authorization server, supplying the client id and secret to as identification; it also provides the scopes and an endpoint URI (redirect URI) to send the Access Token or the Authroization Code to.

2. The Authorization server authenticates the Client and verifies that the requested scopes are permitted. 

3. The Resource owner interacts with the Authorization server to grant access.

4. The Authorization server redirects back to the Client with either an Authorization Code or Access Token, depending on the grant type, as it will be explained in the next section. A Refresh Token may also be returned. 

5. With the Access Token, the Client requests access to the resource from the Resource server.

## Grant Types in OAuth 2.0

### Authorization Code

**The authorization code grant type is the most commonly used because it is optimized for server side applications, where source code is not publicly exposed, and Client secret confidentiality can be maintained**. This is a redirection-based flow, which means that the application must be capable of interacting with user-agent (browser) and receiving API authorization codes that are routed through the user-agent.

#### Step 1: Authorization Code Link

First, the user is given an authorization code link that looks like the following:

```
https://cloud.digitalocean.com/v1/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=CALLBACK_URL&scope=read
```
<!-- Line breaks -->
<br />

Here is an explanation of the link components:

* https://cloud.digitalocean.com/v1/oauth/authorize: the API authorization endpoint
* client_id=client_id: the application’s client ID (how the API identifies the application)
* redirect_uri=CALLBACK_URL: where the service redirects the user-agent after an authorization code is granted
* response_type=code: specifies that your application is requesting an authorization code grant
* scope=read: specifies the level of access that the application is requesting

#### Step 2: User Authorizes Application

When the user click the link, they must first log in to the service, to authenticate their identify (unless they are already logged in). Then they will be prompted by the service to authorize or deny the application access to their account.

#### Step 3: Application Receives Authorization Code

If the user clicks "Authorize Application", the service redirects the user-agent to the application redirect URI., which was specified during the client registration, along with an authorization code. The redirect would look something like this:

```
https://dropletbook.com/callback?code=AUTHORIZATION_CODE
```

#### Step 4: Application Requests Access Token

The application requests an access token from the API, by passing the authorization code along with authentication details, including the client secret, to the API token endpoint. Here is an example POST request to DigitalOcean's token endpoint:

```
https://cloud.digitalocean.com/v1/oauth/token?client_id=CLIENT_ID&client_secret=CLIENT_SECRET&grant_type=authorization_code&code=AUTHORIZATION_CODE&redirect_uri=CALLBACK_URL
```

#### Step 5: Application Receives Access Token

If the authorization is valid, the API will send a response containing the acess token and optionally, a refresh token to the application. The entire response will look something like this:

```json 
{
    "access_token":"ACCESS_TOKEN",
    "token_type":"bearer",
    "expires_in":2592000,
    "refresh_token":"REFRESH_TOKEN",
    "scope":"read",
    "uid":100101,
    "info":
    {
        "name":"Mark E. Mark",
        "email":"mark@thefunkybunch.com"
    }
}
```

<!-- Line breaks -->
<br />

Now the application is authorized! It may use the token to access the user’s account via the service API, limited to the scope of access, until the token expires or is revoked. If a refresh token was issued, it may be used to request new access tokens if the original token has expired.

### Grant Type: Implicit

**The implicit grant type is used for mobile apps and web applications (applications that run in a web browser), where the client secret confidentiality is not guaranteed**. The implicit grant type is also a redirection - based flow but the access token is given to the user - agent to foward to the application, so it may be exposed to the user and other applications on the user's device. Also, this flow does not authenticate the identify of the application, and relies on the redirect URI (that was registered with the service) to server this purpose.

**The implicit grant type does not support refresh token**/

The implicit grant flow basically works as follows: the user is asked to authorize the application, then the authorization server passes the access token back to the user-agent, which passes it to the application. 

### Greant Type: Resource Owner Password Credentials

**With the resource owner password credentials grant type, the user provides their service credentials (username and password) directly to the application, which uses the credentials to obtain an access token from the service**. This grant type should only be enabled on the authorization server if other flows are not viable. Also, it should only be used if the application is trusted by the user (e.g. it is owned by the service, or the user's desktop OS).

### Grant Type: Client Credentials

**The client credentials grant type provides an application a way to access its own service account**. Examples of when this might be useful include if an application wants to update its registered or redirect URI, or access other data stored in this service account via the API.

### Refresh Token Flow

After an access token expires, using it to make a request from the API will result in an “Invalid Token Error”. At this point, if a refresh token was included when the original access token was issued, it can be used to request a fresh access token from the authorization server.


Reference

<https://auth0.com/intro-to-iam/what-is-oauth-2/>

<https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2>