---
layout: post 
title:  31. Next Permutation
date:   2020-12-22 17:30
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

The replacement must be in place and use only constant extra memory.

```
Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]

Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]

Example 4:

Input: nums = [1]
Output: [1]
```

<!-- Line breaks -->
<br />

Constraints:

* 1 <= nums.length <= 100
* 0 <= nums[i] <= 100

## Solution

I found that this problem is really difficult if you don't know the solution. However once you understand the logic behind it, it is really easy to solve. 

Here is the solution: 

  1. Iterator over the given array nums from right to left and find the first decreasing number A
  2. If we cannot find any decreaing number, then we can jsut reverse the whole array and return it. 
  3. If we can find the first decreaing number A, then the next step is from right to left, we need to find the first number B which is on the right side of A and bigger than A. 
  4. Switch number A and B.
  5. Start from number A, we order all numbers ascending then return the array.

```java
class Solution 
{
    public void nextPermutation(int[] nums) 
    {
        if(nums == null || nums.length == 0 || nums.length == 1)
            return;
        
        // Find the first decreasing number
        int firstDecreasingIndex = -1;
        
        for(int i=nums.length-2; i>=0; i--)
        {
            if(nums[i] < nums[i+1])
            {
                firstDecreasingIndex = i;
                break;
            }
        }
        
        // Reverse the array if we cannot find the first decreasing number.
        if(firstDecreasingIndex == -1)
        {
            reverse(nums, 0, nums.length - 1);
            return;
        }
        
        // First decreasing number beding found, we need to find the first numbber bigger than it from right to left.
        int firstLargerIndex = -1;
        for(int i=nums.length-1; i>=0; i--)
        {
            if(nums[i] > nums[firstDecreasingIndex])
            {
                firstLargerIndex = i;
                break;
            }
        }
        
        swap(nums, firstDecreasingIndex, firstLargerIndex);
        reverse(nums, firstDecreasingIndex+1, nums.length-1);
    }
    
    private void reverse(int[] nums, int start, int end)
    {
        while(start < end)
        {
            swap(nums, start, end);
            start ++; 
            end --;
        }
    }
    
    private void swap(int[] nums, int i, int j)
    {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: the length of the given array nums.
* **Space Complexity: O(1)**: we only created few variables.