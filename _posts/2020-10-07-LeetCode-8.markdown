---
layout: post
title:  8. String to Integer (atoi)
date:   2020-10-07 18:48
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Implement atoi which converts a string to an integer.

The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.

The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.

If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.

If no valid conversion could be performed, a zero value is returned.

Note:

* Only the space character ' ' is considered a whitespace character.
* Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.

```
Example 3:

Input: str = "4193 with words"
Output: 4193
Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.

Example 4:

Input: str = "words and 987"
Output: 0
Explanation: The first non-whitespace character is 'w', which is not a numerical digit or a +/- sign. Therefore no valid conversion could be performed.

Example 5:

Input: str = "-91283472332"
Output: -2147483648
Explanation: The number "-91283472332" is out of the range of a 32-bit signed integer. Thefore INT_MIN (−231) is returned.
```

## Solution

This problem can be solved by scan character from left to right. However, there are few edge conditions we need to handle:

1. The given String can be empty or null.
2. Whether the first character is a number or equals to '+' or '-'.
3. Use data type Long to handle Integer out of range issue.

```java
class Solution 
{
    public int myAtoi(String s) 
    {
        if(s == null)
            return 0;
        
        s = s.trim();
        
        if(s.length() == 0)
            return 0;
        
        char firstChar = s.charAt(0);
        int sign = 1;
        long result = 0;
        
        if(!Character.isDigit(firstChar))
        {
            if(firstChar == '+')
                sign = 1;
            else if(firstChar == '-')
                sign = -1;
            else
                return 0;  
        }
        else
        {
            result = firstChar - '0';
        }
        
        for(int i=1; i<s.length(); i++)
        {
            char currChar = s.charAt(i);
            if(!Character.isDigit(currChar))
                break;
            
            result = result * 10 + (currChar - '0');
            if(result > Integer.MAX_VALUE)
                return sign > 0 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
        }
        
        return sign * (int)result;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n))**: N is the length of String s.
* **Space Complexity: O(l)**: We only declare few variables.

