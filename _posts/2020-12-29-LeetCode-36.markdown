---
layout: post 
title:  36. Valid Sudoku
date:   2020-12-29 18:38
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

* Each row must contain the digits 1-9 without repetition.
* Each column must contain the digits 1-9 without repetition.
( Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition

Note:

* A Sudoku board (partially filled) could be valid but is not necessarily solvable.
* Only the filled cells need to be validated according to the mentioned rules.

```
Exmaple 1:

Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false

Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
```

<!-- Line breaks -->
<br />

Constraints:

* board.length == 9
* board[i].length == 9
* board[i][j] is a digit or '.'.

## Solution

In order to valid Sudoku, we can create 3 set to valid each row, column and sub-box individually.

How can we define sub set column and row?

```java
int subRow = 3 * (i / 3) + j / 3;
int subCol = 3 * (i % 3) + j % 3;
```

<!-- Line breaks -->
<br />

```java
class Solution 
{
    public boolean isValidSudoku(char[][] board) 
    {
        if(board == null || board.length != 9 && board[0].length != 9)
            return false;
        
        for(int i=0; i<board.length; i++)
        {
            Set<Character> colSet = new HashSet<>();
            Set<Character> rowSet = new HashSet<>();
            Set<Character> subSet = new HashSet<>();
            
            for(int j=0; j<board[i].length; j++)
            {
                // Check column duplicate
                if(board[i][j] != '.' && !colSet.add(board[i][j]))
                    return false;
                
                // Check row duplicate
                if(board[j][i] != '.' && !rowSet.add(board[j][i]))
                    return false;
                
                // Check sub set
                int subRow = 3 * (i / 3) + j / 3;
                int subCol = 3 * (i % 3) + j % 3;
                
                if(board[subRow][subCol] != '.' && !subSet.add(board[subRow][subCol]))
                    return false;
            }
        }
        
        return true;
    }
}
```

## Time & Space Complexity:

* **Time Complexity: O(n<sup>2</sup>)**: Two for loop.
* **Space Complexity: O(n)**: We cretae 3 sets for validation