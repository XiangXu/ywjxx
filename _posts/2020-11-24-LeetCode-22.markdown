---
layout: post 
title:  22. Generate Parentheses
date:   2020-11-23 23:37
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

```
Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

Example 2:

Input: n = 1
Output: ["()"]
```

<!-- Line breaks -->
<br />

Constraints:

* 1 <= n <= 8

## Solution 

This question requires us to generate all combinations of well-formed parentheses. Speak of all combinations, we must know it is a question can be solved by using backtracking.

```java
class Solution
{
    public List<String> generateParenthesis(int n) 
    {        
        List<String> result = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        
        backTracking(result, sb, 0, 0, n);
        
        return result;
    }
    
    private void backTracking(List<String> result, StringBuilder sb, int open, int close, int n)
    {        
        if(open == n && close == n)
        {
            result.add(sb.toString());
            return;
        }
        
        if(open < n)
        {
            sb.append("(");
            backTracking(result, sb, open+1, close, n);
            sb.deleteCharAt(sb.length()-1);
        }
            
        
        if(open > close)
        {
            sb.append(")");
            backTracking(result, sb, open, close+1, n);
            sb.deleteCharAt(sb.length()-1);
        }
            
        
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity: