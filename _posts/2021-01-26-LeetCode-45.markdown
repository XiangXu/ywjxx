---
layout: post 
title:  45. Jump Game II
date:   2021-01-26 20:22
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.

```
Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:

Input: nums = [2,3,0,1,4]
Output: 2
```

<!-- Line breaks -->
<br />

Constraints:

* 1 <= nums.length <= 3 * 104
* 0 <= nums[i] <= 105

## Solution

This problem can be solved by using greedy algorithm. When we select the next jump, we need to find the max(nums[i] + i) in maximum jump length at that position for each jump.

```java
class Solution 
{
    public int jump(int[] nums) 
    {
        if(nums == null || nums.length == 0)
            return 0;
        
        int jumpCount = 0;
        int currMaxIndex = 0;
        
        while(currMaxIndex < nums.length-1)
        {
            currMaxIndex = findNextMaxNumIndex(currMaxIndex, nums);
            jumpCount ++;
        }
        
        return jumpCount;
    }
    
    private int findNextMaxNumIndex(int currMaxIndex, int[] nums)
    {
        int currNum = nums[currMaxIndex];
        int maxJumpLen = currNum + currMaxIndex;
        
        if(maxJumpLen >= nums.length - 1)
            return maxJumpLen;
        
        int nextMaxNum = Integer.MIN_VALUE;
        int nextMaxNumIndex = Integer.MIN_VALUE;
        
        for(int i=currMaxIndex+1; i<=maxJumpLen; i++)
        {
            if(nums[i] + i >= nextMaxNum + nextMaxNumIndex)
            {
                nextMaxNum = nums[i];
                nextMaxNumIndex = i;
            }
        }
        
        return nextMaxNumIndex;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(m)**: m is the length of given array nums.
* **Space Complexity: O(l)**: we only created few variables.

