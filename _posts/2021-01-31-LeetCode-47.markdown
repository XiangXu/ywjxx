---
layout: post 
title:  47. Permutations II
date:   2021-01-31 18:40
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

```
Example 1:

Input: nums = [1,1,2]
Output:
[
 [1,1,2],
 [1,2,1],
 [2,1,1]
]

Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
```

<!-- Line breaks -->
<br />

Constraints:

* 1 <= nums.length <= 8
* -10 <= nums[i] <= 10

## Solution

This problem is similar to the previous one, the difference is the given array nums may contain duplicates and we need to return all possible unique permutations in any order. In order to avoid duplication, we can order the given array first so that all duplicated numbers will be close to each other. On the other hand, although the given array might contain duplicates but the indexs are unique.

```
Let's take an example: [1, 1, 3]

[1] -> 
[1, 1], [1, 3] -> 
[1, 1, 3], [1, 3, 1]

[1] -> continue
[1, 1], [1, 3] -> 
[1, 1, 3], [1, 3, 1]

[3] -> 
[3, 1], [3, 1] -> continue
[3, 1, 1], [3, 1, 1]
```

<!-- Line breaks -->
<br />

```java
class Solution 
{
    public List<List<Integer>> permuteUnique(int[] nums) 
    {
        if(nums == null || nums.length == 0)
            return Collections.emptyList();
        
        Arrays.sort(nums);
        
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> tmpList = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        
        backTracking(visited, nums, tmpList, result);
        
        return result;
    }
    
   private void backTracking(boolean[] visited, int[] nums, List<Integer> tmpList, List<List<Integer>> result)
    {
        if(tmpList.size() == nums.length)
        {
            //tmpList will be modified afterwards, so we need to create a copy of it
            result.add(new ArrayList<>(tmpList));
            return;
        }
        
        for(int i=0; i<nums.length; i++)
        {
            if(visited[i]) 
                continue;
            
            //handle duplicate numbers, if previous identical number is used, then use the current number.
            if(i > 0 && nums[i] == nums[i-1] && !visited[i-1])
                continue;
            
            tmpList.add(nums[i]);
            visited[i] = true;
            backTracking(visited, nums, tmpList, result);
            tmpList.remove(tmpList.size()-1);
            visited[i] = false;
        }
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity:**  
* **Space Complexity: O(l)**: we only created few variables.

