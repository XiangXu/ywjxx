---
layout: post 
title:  46. Permutations
date:   2021-01-30 20:00
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

```
Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
```

<!-- Line breaks -->
<br />

Constraints:

* 1 <= nums.length <= 6
* -10 <= nums[i] <= 10
* All the integers of nums are unique.

## Solution

This problem can be solved by using backtracking. Given an array nums of distinct integers, we can use contains method to avoid duplication.

```java
class Solution 
{
    public List<List<Integer>> permute(int[] nums) 
    {
        if(nums == null || nums.length == 0)
            return Collections.emptyList();
        
        List<Integer> tmpList = new ArrayList();
        List<List<Integer>> result = new ArrayList();
        
        backTracking(nums, tmpList, result);
        
        return result;
    }
    
    private void backTracking(int[] nums, List<Integer> tmpList, List<List<Integer>> result)
    {
        if(tmpList.size() == nums.length)
        {
            // We have to create a new list because tmpList will be modified afterwards.
            result.add(new ArrayList<>(tmpList));
            return;
        }
        
        for(int num : nums)
        {
            if(tmpList.contains(num))
                continue;
            
            tmpList.add(num);
            backTracking(nums, tmpList, result);
            tmpList.remove(tmpList.size()-1);
        }
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(2<sup>n</sup>)**: n is the length of given array nums.
* **Space Complexity: O(l)**: we only created few variables.

