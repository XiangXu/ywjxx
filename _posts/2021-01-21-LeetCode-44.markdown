---
layout: post 
title:  44. Wildcard Matching
date:   2021-01-21 23:05
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

* '?' Matches any single character.
* '*' Matches any sequence of characters (including the empty sequence).
* The matching should cover the entire input string (not partial).

```
Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.

Example 3:

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.

Example 4:

Input: s = "adceb", p = "*a*b"
Output: true
Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring "dce".

Example 5:

Input: s = "acdcb", p = "a*c?b"
Output: false
```

<!-- Line breaks -->
<br />

Constraints:

* 0 <= s.length, p.length <= 2000
* s contains only lowercase English letters.
* p contains only lowercase English letters, '?' or '*'.

## Solution

In order to solve this problem, we need to highlight follow conditions:

* ? matches any single character
* * matches any sequence of characters including the empty sequence

We can use two pointers to solve this problem. 

* If two characters are the same or one of them is '*', both pointers move to next character.
* If one character equals to '?', we need to find next match character and try all the possibilities.

```java
class Solution 
{
    // a c d c c d
    // * c d
    public boolean isMatch(String s, String p) 
    {
        int sPointer = 0;
        int pPointer = 0;
        
        int sMatchIndex = -1;
        int pMatchIndex = -1;
        
        while(sPointer < s.length())
        {
            if(pPointer < p.length() && (s.charAt(sPointer) == p.charAt(pPointer) || p.charAt(pPointer) == '?'))
            {
                sPointer ++;
                pPointer ++;
            }
            else if(pPointer < p.length() && p.charAt(pPointer) == '*')
            {
                sMatchIndex = sPointer;
                pMatchIndex = pPointer;
                pPointer ++;
            }
            else if(sMatchIndex > -1)
            {
                pPointer = pMatchIndex + 1;
                sMatchIndex ++;
                sPointer = sMatchIndex;
            }
            else
            {
                return false;
            }
        }
        
        // Handle cases:
        // 1. abc abc*
        // 2. abc abcd
        while(pPointer < p.length() && p.charAt(pPointer) == '*')
            pPointer ++;
        
        return pPointer == p.length();
        
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(mn)**: m is the length of s and n is the length of p.
* **Space Complexity: O(l)**: we only created few variables.


