---
layout: post 
title:  79. Word Search
date:   2021-10-09 21:42
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

```
Example 1:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Exmaple 2:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true

Example 3:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
```

<!-- Line breaks -->
<br />

Constraints:

* m == board.length
* n = board[i].length
* 1 <= m, n <= 6
* 1 <= word.length <= 15
* board and word consists of only lowercase and uppercase English letters.

## Solution

This problem can be solved by using DFS.

```java
class Solution {
    public boolean exist(char[][] board, String word) {
        
        int index = 0;
        int row = board.length;
        int col = board[0].length;
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < board[i].length; j++) {
                if(board[i][j] == word.charAt(0) && searchWord(board, row, col, i, j, word, index)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    private boolean searchWord(char[][] board, int row, int col, int i, int j, String word, int index) {
        if(index == word.length()) {
            return true;
        }
        
        if(i < 0 || j < 0 || i >= col || j >= row || board[i][j] == '#' || word.charAt[length] !=word.charAt(index)) {
            return false; 
        }
    }
}
```

## Time & Space Complexity:

* **Time Complexity: ?**
* **Space Complexity: O(1)**: no extra space.