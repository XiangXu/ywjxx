---
layout: post
title:  Longest Substring Without Repeating Characters
date:   2020-09-19 13:47
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given a string s, find the length of the longest substring without repeating characters.

```
Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Example 4:

Input: s = ""
Output: 0
```

<!-- Line breaks -->
<br />


Constraints:

* 0 <= s.length <= 5 * 10<sup>4</sup>
* s consists of English letters, digits, symbols and spaces.

## Solution

This is a typical sliding window problem, **a sliding window is an abstract concept commonly used in array/string problem**. A window is a range of elements in array/string which usually defined by the start and end incides. 

1. Create a Map to store character and its index of the given String.
2. Define two pointers called start and end, they both point to the first character at begining.
3. Slide end pointer to right and if current character is not in the Map, we calculate current max length then slide end pointer further.
4. If current character is in the Map, we update index value in the map for that character if needed by Math.max(start, map.get(currChar)+1), then repeat step 3.
5. Return the max length when end pointer reach the last character in the given String.

```java
class Solution 
{
    public int lengthOfLongestSubstring(String s) 
    {
        int maxLen = 0;
        
        // Handle special case
        if(s == null || s.length() == 0)
            return maxLen;
        
        // Define a map to save character and index, so we can skip the characters immidately when we found a repeated character.
        Map<Character, Integer> map = new HashMap<>();
        
        // Sliding window
        for(int start = 0, end = 0; end < s.length(); end ++)
        {
            char currChar = s.charAt(end);
            
            // Move the start pointer if needed 
            if(map.containsKey(currChar))
                start = Math.max(start, map.get(currChar)+1);
            
            map.put(currChar, end);
            maxLen = Math.max(maxLen, end - start + 1);
        }
        
        return maxLen;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: We traverse the given String.
* **Space Complexity: O(n)**: The extra space required on the number of character stored in the hash table.
