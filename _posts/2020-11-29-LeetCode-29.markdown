# Merge k Sorted Lists

## Problem

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

```
Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:

Input: lists = []
Output: []

Example 3:

Input: lists = [[]]
Output: []
```

<!-- Line breaks -->
<br />

## Solution 

We can traverse over all the ListNodes in the given list and save all values into a PriorityQueue. Then create another ListNode and iterator over the PriorityQueue and save the value into the ListNode.

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    public ListNode mergeKLists(ListNode[] lists) 
    {
        ListNode dummyHead = new ListNode(0);
        ListNode current = dummyHead;
        
        PriorityQueue<Integer> priorityQueue = new PriorityQueue<Integer>((a ,b) -> a-b);
        
        for(ListNode listNode : lists)
        {
            while(listNode != null)
            {
                priorityQueue.offer(listNode.val);
                listNode = listNode.next;
            }
        }
        
        while(!priorityQueue.isEmpty())
        {
            current.next = new ListNode(priorityQueue.poll());
            current = current.next;
        }
        
        
        return dummyHead.next;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(Nlogk)**: where k is the number of linked lists.
* **Space Complexity: O(n)**: the length of dummyHead.

