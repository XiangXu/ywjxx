---
layout: post 
title:  24. Swap Nodes in Pairs
date:   2020-12-02 23:21
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes. Only nodes itself may be changed.

```
Example 1:

Input: head = [1,2,3,4]
Output: [2,1,4,3]

Example 2:

Input: head = []
Output: []

Example 3:

Input: head = [1]
Output: [1]
```

<!-- Line breaks -->
<br />

Constraints:

* The number of nodes in the list is in the range [0, 100].
* 0 <= Node.val <= 100

## Solution 

This problem is not really hard to solve.

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    public ListNode swapPairs(ListNode head) 
    {
        if(head == null || head.next == null)
            return head;
        
        ListNode dummyHead = new ListNode(0);
        dummyHead.next = head;
        ListNode curr = dummyHead;
        
        while(curr.next != null && curr.next.next != null)
        {
            ListNode first = curr.next;
            ListNode second = curr.next.next;
            
            curr.next = second;
            first.next = second.next;
            curr.next.next = first;
            
            curr = curr.next.next;
        }
        
        return dummyHead.next;
        
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: where n is the length of ListNode head.
* **Space Complexity: O(n)**: the length of dummyHead.
