---
layout: post 
title:  42. Trapping Rain Water
date:   2021-01-14 22:58
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:

![alt text](https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png "Trapping Rain Water")

```
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
```

Constraints:

* n == height.length
* 0 <= n <= 3 * 104
* 0 <= height[i] <= 105

## Solution

In order to solve this problem, we should ask ourselves the following questions: 

1. How does rain water get trapped? 
2. How to compute how much water it can trap after raining?
    
The answers are:

1. When the height on the left and right are higher than the height of current point, then the rain water will get trapped.
2. We need to find the highest number on the left of current point, we also need to find the highest number on the right side of current. Then do calculation: Math.min(height[highest left], height[heighest right]) - height[current]

```java
class Solution 
{
    public int trap(int[] height) 
    {
        int result = 0;
       
        if(height == null || height.length < 2)
            return result;
        
        // Skip the first and last point as water will never get trapped there.
        for(int i=1; i<height.length - 1; i++)
        {
            int highestLeft = height[i];
            int highestRight = height[i];
            
            // Find the highest left
            for(int a=i; a>=0; a--)
                highestLeft = Math.max(height[a], highestLeft);
            
            // Find the highest right
            for(int b=i; b<height.length; b++)
                highestRight = Math.max(height[b],highestRight);
            
            result += Math.min(highestLeft, highestRight) - height[i];
        }
        
        return result;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n<sup>2</sup>)**: we used 2 for loop.
* **Space Complexity: O(l)**: we only created few variables.

