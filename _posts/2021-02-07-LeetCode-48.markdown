---
layout: post 
title:  48. Rotate Image
date:   2021-02-07 19:17
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

```
Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:

Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

Example 3:

Input: matrix = [[1]]
Output: [[1]]

Example 4:

Input: matrix = [[1,2],[3,4]]
Output: [[3,1],[4,2]]

```

<!-- Line breaks -->
<br />

Constraints:

* matrix.length == n
* matrix[i].length == n
* 1 <= n <= 20
* -1000 <= matrix[i][j] <= 1000

## Solution

In order to solve this problem, we need to order the given array matrix twice.

```
1. Order all numbers from top to bottom
    [1,2,3]
    [4,5,6]
    [7,8,9]

becomes to 
    [1,4,7]
    [2,5,8] 
    [3,6,9]

2. Reverse each all numbers in each row:
    [7,4,1]
    [8,5,2] 
    [9,6,3]
```

<!-- Line breaks -->
<br />

```java
class Solution 
{
    public void rotate(int[][] matrix) 
    {
        // Order all numbers from top to bottom
        for(int i=0; i<matrix.length; i++)
        {
            for(int j=i; j<matrix.length; j++)
            {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = tmp;
            }
        }
        
        //Reverse eachh all numbers in each row
        for(int i=0; i<matrix.length; i++)
        {
            for(int j=0; j<matrix.length/2; j++)
            {
                int swapIndex = matrix.length - 1 - j;
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[i][swapIndex];
                matrix[i][swapIndex] = tmp;
            }
        }
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n<sup>2</sup>)**: two for loops. 
* **Space Complexity: O(l)**: we only created few variables.
