---
layout: post
title:  13. Roman to Integer
date:   2020-11-01 14:30
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

```
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
```

<!-- Line breaks -->
<br />

For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

* I can be placed before V (5) and X (10) to make 4 and 9. 
* X can be placed before L (50) and C (100) to make 40 and 90. 
* C can be placed before D (500) and M (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer

```
Example 1:

Input: s = "III"
Output: 3

Example 2:

Input: s = "IV"
Output: 4

Example 3:

Input: s = "IX"
Output: 9

Example 4:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.

Example 5:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
```

<!-- Line breaks -->
<br />

Constraints:

* 1 <= s.length <= 15
* s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
* It is guaranteed that s is a valid roman numeral in the range [1, 3999].

## Solution

1. We need to create a method which can be used to convert character to integer.
2. We can literate over the given String and store current character as variable curr and previous character as variable pre.
3. Then we can sum up the value of each character to get the final result. 

However we need to think about a special case, for example: "MCM"

1. First character equals to 'M'. At this time: result = 1000;
2. Second character equals to 'C'. At this time: result = 1000 + 100 = 11000;
3. Third character equals to 'M'. At this time, M = 1000 which is bigger than previous character C = 100. 
4. In this case: result = (1100 - 100) + (1000 - 100) = 1900

```java
class Solution 
{    
    public int romanToInt(String s) 
    {
        // check special case
        if(s == null || s.length() == 0)
            return 0;
        
        int result = convertCharToInt(s.charAt(0));
        
        for(int i=1; i<s.length(); i++)
        {
            int pre = convertCharToInt(s.charAt(i-1));
            int curr = convertCharToInt(s.charAt(i));
            
            if(curr > pre)
            {
                result = result - pre + (curr - pre);
            }
            else
            {
                result += curr;
            }
        }
        
        return result;
    }
    

     private int convertCharToInt(char c)
    {
        switch(c)
        {
            case 'I': return 1;
            case 'V': return 5;
            case 'X': return 10;
            case 'L': return 50;
            case 'C': return 100;
            case 'D': return 500;
            case 'M': return 1000;
        }
        
        return 0;
    }
}
```


<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(1)**: length of String s.
* **Space Complexity: O(1)**: Constant space is used.