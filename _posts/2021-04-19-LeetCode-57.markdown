---
layout: post 
title:  57. Insert Interval
date:   2021-04-18 23:52
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem 

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.


```
Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
Example 3:

Input: intervals = [], newInterval = [5,7]
Output: [[5,7]]
Example 4:

Input: intervals = [[1,5]], newInterval = [2,3]
Output: [[1,5]]
Example 5:

Input: intervals = [[1,5]], newInterval = [2,7]
Output: [[1,7]]
```

<!-- Line breaks -->
<br />

Constraints:

* 0 <= intervals.length <= 104
* intervals[i].length == 2
* 0 <= intervals[i][0] <= intervals[i][1] <= 105
* intervals is sorted by intervals[i][0] in ascending order.
* newInterval.length == 2 0 <= newInterval[0] <= newInterval[1] <= 105

## Solution

Input: [1, 2] [3, 5], [6, 7], [8, 10], [12, 16]

New Interval: [4, 8]

We need to find the overlap first. We can achieve this by checking intervals[i][1] with newInterval[0]
    
[1, 3] -> no overlap
    
[3, 5] -> 5 > 4 -> overlap
    
Then we need to find out where this overlap will end. We can find it by checking intervals[i][0] <= newInterval[1]
    
[3, 5] -> 5
    
[6, 7] -> 7 < 8 -> overlap

[8, 10] -> 8 == 8 -> overlap
    
[12, 16] -> 12 > 8 -> no overlap
    
At this time, we will know the overlap occurs between [3, 5], [6, 7], [8, 10] 
    
Merge those 3 arrays we can get [3, 10].
    
So the result will be [[1, 2], [3, 10], [10, 12]]

<!-- Line breaks -->
<br />

```java
class Solution 
{   
    public int[][] insert(int[][] intervals, int[] newInterval) 
    {
        List<int[]> result = new ArrayList<>();
        
        int i=0;
      
        // Add no overlap array into result
        while(i < intervals.length && intervals[i][1] < newInterval[0])
        {
            result.add(new int[] {intervals[i][0], intervals[i][1]});
            i++;
        }
        
        //Merge overlap arrays
        while(i < intervals.length && intervals[i][0] <= newInterval[1])
        {
            newInterval[0] = Math.min(intervals[i][0], newInterval[0]);
            newInterval[1] = Math.max(intervals[i][1], newInterval[1]);
            i++;
        }
        
        result.add(new int[] {newInterval[0], newInterval[1]});
        
        // add remain arrays into result list
        while(i < intervals.length)
        {
            result.add(new int[] {intervals[i][0], intervals[i][1]});
            i++;
        }
        
        int[][] array = new int[result.size()][2];
        for(i=0; i<result.size(); i++)
        {
            array[i][0] = result.get(i)[0];
            array[i][1] = result.get(i)[1];
        }
        
        return array;
        
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: n is the length of intervals.
* **Space Complexity: O(n))** N is the length of result list