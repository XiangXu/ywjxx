---
layout: post 
title:  56. Merge Intervals
date:   2021-04-08 23:54
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem 

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

```
Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
```

<!-- Line breaks -->
<br />

Constraints:

* 1 <= intervals.length <= 10<sup>4</sup>
* intervals[i].length == 2
* 0 <= start<sub>i</sub> <= end<sub>i</sub> <= 10<sup>4</sup>

## Solution

This problem can be solved by sorting. If we sort the intervals by their start value, then each set of intervals that can be merged will appear as a contiguous run in the sorted list.    

First, we sort the list as described. Then, we insert the first interval into our merged list and continue considering each interval in turn as follows: If the current interval begins after the previous interval ends, then they do not overlap and we can append the current interval to merged. Otherwise, they do overlap, and we merge them by updating the end of the previous interval if it is less than the end of the current interval.

```java
class Solution 
{
    public int[][] merge(int[][] intervals) 
    {
        if(intervals.length == 1)
            return intervals;
        
        Arrays.sort(intervals, (arr1, arr2) -> arr1[0] - arr2[0]);
        
        List<int[]> list = new ArrayList<>();
        int[] current = intervals[0];
        list.add(current);
        
        for(int[] interval : intervals)
        {
            int currentStart = current[0];
            int currentEnd = current[1];
            int nextStart = interval[0];
            int nextEnd = interval[1];
            
            if(currentEnd >= nextStart)
            {
                current[1] = Math.max(currentEnd, nextEnd);
            }
            else
            {
                current = interval;
                list.add(current);
            }
        }
        
        return list.toArray(new int[list.size()][]);
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(nlogn)**: Other than the sort invocation, we do a simple linear scan of the list, so the runtime is dominated by the O(nlogn) complexity of sorting.
* **Space Complexity: O(logN) (or O(n))**: If we can sort intervals in place, we do not need more than constant additional space, although the sorting itself takes O(logn) space. Otherwise, we must allocate linear space to store a copy of intervals and sort that.