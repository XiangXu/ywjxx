---
layout: post
title:  15 3 Sum
date:   2020-11-15 11:47
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Notice that the solution set must not contain duplicate triplets.

```
Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:

Input: nums = []
Output: []

Example 3:

Input: nums = [0]
Output: []
```

<!-- Line breaks -->
<br />

Constraints:

* 0 <= nums.length <= 3000
* -105 <= nums[i] <= 105

## Problem

This problem can be solved by using two pointers. The idea is to sort an input array and then run through all indices of a possible first element of a triplet.  For each possible first element we make a standard bi-directional 2 Sum sweep of the remaining part of the array. Also we want to skip equal elements to avoid duplicates in the answer.

```java
class Solution 
{
    public List<List<Integer>> threeSum(int[] nums) 
    {
        if(nums == null || nums.length == 0)
            return Collections.emptyList();
        
        Arrays.sort(nums);
        
        List<List<Integer>> result = new ArrayList<>();
        
        for(int i=0; i<nums.length; i++)
        {
            // Skip the same number
            if(i > 0 && nums[i] == nums[i-1])
                continue;
            
            int left = i+1;
            int right = nums.length - 1;
            
            while(left < right)
            {
                int sum = nums[i] + nums[left] + nums[right];
                
                if(sum < 0)
                {
                    left ++;
                    // Skip the same number
                    while(left < right && nums[left] == nums[left - 1])
                        left ++;
                }
                else if(sum > 0)
                {
                    right --;
                    // Skip the same number
                    while(left < right && nums[right] == nums[right + 1])
                        right --;
                }
                else
                {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    
                    left ++;
                    right --;
                    
                    // Skip the same number
                    while(left < right && nums[left] == nums[left - 1])
                        left ++;
                    
                    // Skip the same number
                    while(left < right && nums[right] == nums[right + 1])
                        right --;
                }
            }
        }
        
        return result;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n<sup>2</sup>)**: Traverse the given array and also traverse the reamining part of array with two pointers.
* **Space Complexity: O(n)**: length of result list.



