---
layout: post 
title:  34. Find First and Last Position of Element in Sorted Array
date:   2020-12-27 18:27
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?

```
Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
```

<!-- Line breaks -->
<br />

Constraints:

* 0 <= nums.length <= 105
* -109 <= nums[i] <= 109
* nums is a non-decreasing array.
* -109 <= target <= 109

## Solution

The given array sorted in ascending order and the question asks as to solve it with O(log n) runtime complexity, then we know we will have to use binary search. Although We nhave to make some adjustments to binary search algorithm, we need to find the first and the last position of element in sorted array.

```java
class Solution 
{
    public int[] searchRange(int[] nums, int target) 
    {
        if(nums == null || nums.length == 0)
            return new int[]{-1, -1,};
        
        int firstIndex = findFirstIndex(nums, target);
        int lastIndex = findLastIndex(nums, target);
        
        return new int[]{firstIndex, lastIndex};
    }
    
    private int findFirstIndex(int[] nums, int target)
    {
        int start = 0;
        int end = nums.length - 1;
        int index = -1;
        
        while(start <= end) 
        {
            int mid = start + (end - start) / 2;
            if(nums[mid] >= target)
                end = mid - 1;
            else
                start = mid + 1;
            
            if(nums[mid] == target)
                index = mid;
        }
        
        return index;
    }
    
    private int findLastIndex(int[] nums, int target)
    {
        int start = 0;
        int end = nums.length - 1;
        int index = -1;
        
        while(start <= end) 
        {
            int mid = start + (end - start) / 2;
            if(nums[mid] <= target)
                start = mid + 1;
            else
                end = mid - 1;
            
            if(nums[mid] == target)
                index = mid;
        }
        
        return index;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(Logn)**: Binary Search.
* **Space Complexity: O(1)**: Only created few variables.