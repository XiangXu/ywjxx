---
layout: post 
title:  442. Find All Duplicates in an Array
date:   2021-10-07 22:23
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

```
Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]

Example 2:

Input: nums = [1,1,2]
Output: [1]

Example 3:

Input: nums = [1]
Output: []
```

<!-- Line breaks -->
<br />

Constraints:

* n == nums.length
* 1 <= n <= 105
* 1 <= nums[i] <= n
* Each element in nums appears once or twice.

## Solution

Traverse the given array and check each integer.
* if current integer is a positive number then set it to negative.
* if current integer is a negative number then it means current index number appears twice.

```java
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> result = new ArrayList<>();
       
        for(int i=0; i<nums.length; i++) {
            int index = Math.abs(nums[i]);
            if(nums[index - 1]> 0) {
                nums[index - 1] = -nums[index - 1];
            }
            else {
                result.add(index);
            }
        }
        
        return result;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: n is the length of given array.
* **Space Complexity: O(1)**: no extra space.
