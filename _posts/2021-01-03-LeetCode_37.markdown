---
layout: post 
title:  37. Sudoku Solver
date:   2021-01-03 18:47
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row. Each of the digits 1-9 must occur exactly once in each column. Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.

Note:

* The given board contain only digits 1-9 and the character '.'.
* You may assume that the given Sudoku puzzle will have a single unique solution.
* The given board size is always 9x9.

```
Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]

Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
```

<!-- Line breaks -->
<br/>

Constraints:

* board.length == 9
* board[i].length == 9
* board[i][j] is a digit or '.'.
* It is guaranteed that the input board has only one solution.

## Solution

This problem can be solved by using DFS(Deep Fist Search). We can valid each input until we find the correct answer.

```java
class Solution 
{
    public void solveSudoku(char[][] board) 
    {
        dfs(board);
    }
    
    private boolean dfs(char[][] board)
    {
        for(int i=0; i<board.length; i++)
        {
            for(int j=0; j<board[0].length; j++)
            {
                if(board[i][j] == '.')
                {
                    for(char c='1'; c<='9'; c++)
                    {
                        if(isValidSudoku(board, i, j, c))
                        {
                            board[i][j] = c;
                            if(dfs(board))
                                return true;
                            else
                                board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    private boolean isValidSudoku(char[][] board, int row, int col, char c)
    {
        for(int i=0; i<board.length; i++)
        {    
            // check if current column contains duplicate
            if(board[row][i] == c)
                return false;
            
            // check if current row contains duplicate
            if(board[i][col] == c)
                return false;
            
            // check if current sub box contains duplicate
            int subRow = 3 * (row / 3) + (i / 3);
            int subCol = 3 * (col / 3) + (i % 3);
            
            if(board[subRow][subCol] != '.' && board[subRow][subCol] == c)
                return false;     
        }
        
        return true;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n<sup>2</sup>)**: ?
* **Space Complexity: O(n)**: ?