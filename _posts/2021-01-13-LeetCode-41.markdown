---
layout: post 
title:  41. First Missing Positive
date:   2021-01-13 23:12
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given an unsorted integer array nums, find the smallest missing positive integer.

Follow up: Could you implement an algorithm that runs in O(n) time and uses constant extra space.?

```
Example 1:

Input: nums = [1,2,0]
Output: 3

Example 2:

Input: nums = [3,4,-1,1]
Output: 2

Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
```

<!-- Line breaks -->
<br/>

Constraints:

* 0 <= nums.length <= 300
* -231 <= nums[i] <= 231 - 1

## Solution

This problem requires us to implement an algorithm that runs in O(n) time and uses constant extra space. It means we can only modify the given array. 

The key to solve this problem is to understand:  **Fisrt Missing Positive must be in range [0, nums.length+1]**.

We can order the given array, make sure for each index we have **nums[i] = nums[nums[i]-1]**. After that we can traverse over the array, if we find index != num, then the missing positive is index + 1.

Let's take an example:

```
nums:  3, 4, -1, 1
index: 0, 1,  2, 3

Then we start to order the arry by index = num - 1

i = 0: nums[3-1] = -1, nums[0] = 3, not equal, switch 3 and -1, array becomes to: -1, 4, 3, 1;
i = 0: nums[0] = -1, i++;
i = 1: nums[4-1] = 1,  nums[1] = 4, not equal, switch 4 and 1, array becomes to -1, 1, 3, 4;
i = 1: nums[1-1] = -1, nums[1] = 1, not equal, switch -1 and 1, array becomes to 1, -1, 3, 4;
i = 1: nums[1-1] = 1, i++;
i = 2: nums[3-1] = 3,  nums[2] = 3, i++;
i = 3: nums[4-1] = 4,  nums[3] = 4, end;

At this time, nums: 1,-1, 3, 4, so we can traverse over the array, when index = 1, nums[index] = -1 != 1, then the first missing positive will be index = 1 + 1 =2.
```

<!-- Line breaks -->
<br/>

```java
class Solution 
{
    public int firstMissingPositive(int[] nums) 
    {
        if(nums == null || nums.length == 0)
            return 1;
              
        for(int i=0; i<nums.length; i++)
        {
            // Order array nums by nums[i] = nums[nums[i]-1]
            while(nums[i] > 0 && nums[i] < nums.length && nums[i] != nums[nums[i]-1])
            {
                int tmp = nums[nums[i]-1];
                nums[nums[i]-1] = nums[i];
                nums[i] = tmp;
            }
        }
        

        for(int i=0; i<nums.length; i++)
        {
            if(nums[i] - 1 != i)
                return i + 1;
        }
        
        return nums.length + 1;
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: n is the length of array nums.
* **Space Complexity: O(l)**: we only created few variables.