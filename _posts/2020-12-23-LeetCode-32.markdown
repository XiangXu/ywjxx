---
layout: post 
title:  32. Longest Valid Parentheses
date:   2020-12-23 21:36
image:  leetcode.jpeg
tags:   LeetCode
---

## Problem

Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

```
Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".

Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".

Example 3:

Input: s = ""
Output: 0
```

<!-- Line breaks -->
<br />

Constraints:

0 <= s.length <= 3 * 104
s[i] is '(', or ')'.

## Solution

In this approach, we make use of two counters left and right. First, we start traversing the string from the left towards the right and for every '(' encountered, we increment the left counter and for every ')' encountered, we increment the right counter. Whenever left becomes equal to right, we calculate the length of the current valid string and keep track of maximum length substring found so far. If right becomes greater than left we reset left and right to 0.

Next, we start traversing the string from right to left and similar procedure is applied.

```java
class Solution 
{
    public int longestValidParentheses(String s)
    {       
        if(s == null || s.length() <= 1)
            return 0;
        
        int result = 0;
        int left = 0;
        int right = 0;
        
        for(int i=0; i<s.length(); i++)
        {
            if(s.charAt(i) == '(')
            {
                left ++;
            }
            else
            {
                right ++;   
            }
            
            if(left == right)
            {
                result = Math.max(result, left+right);
            }
            else if(right > left)
            {
                left = 0;
                right = 0;
            }
        }
        
        left = 0;
        right = 0;
        
        for(int i=s.length()-1; i>=0; i--)
        {
             if(s.charAt(i) == ')')
            {
                right ++;
            }
            else
            {
                left ++;   
            }
            
            if(left == right)
            {
                result = Math.max(result, left+right);
            }
            else if(left > right)
            {
                left = 0;
                right = 0;
            } 
        } 
                    
        return result; 
    }
}
```

<!-- Line breaks -->
<br />

## Time & Space Complexity:

* **Time Complexity: O(n)**: two traversals of the string.
* **Space Complexity: O(1)**: Only two extra variables left and right are needed.